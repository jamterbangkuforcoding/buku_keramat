MENGGUNAKAN RESOURCE CONTROLLER
1. PHP ARTISAN
  - php artisan serve (untuk menjalankan  laravel)
  - php artisan make:model -m NamaModel (membuat model sekaligus dengan tablenya)
  - php artisan make:controller NamaController --resource --model=NamaModel
  - php artisan migrate (Untuk memasukan tabel kedatabase kita)
  - php artisa migrate:fresh (untuk memasukan tabel yang baru atau menyimpan perubaha kedalam database kita)
  - php artisan storage:link (untuk menghubungkan sotorage ke public, biar gambar kita bisa di akses)
  
2. CONFIGURASI
  - database -> migration (tempat tabel kita)
  - config -> filesystem (untuk engubah folder gaembar kita ke public) -> FILESYSTEM_DISK=public di .env
  - Middleware\Authenticate 'login'
  - Providers\RouteServicesProvider -> /home
  - use Illuminate\Support\Facades\Auth; -> unutk login
  - use Illuminate\Support\Facades\Storage; untuk storage gambar di controller pas fungsi DELETE dan UBAH
  - enctype="multipart/from-data" -> untuk setiap from yang ada gambarnya 
  
  - di model -> protected $guarded=['id']; -> id jangan diisi / protected $fillable = ['nama','kelas']; -> harus diisi
=========================================================================================================================================================
use App\Http\Controllers\SiswaControler;

Route::resource('/siswa',SiswaController::class); -> satu untuk CRUD ;)


3. READ

    ...index(){
        return view('siswa',['siswa'=>Siswa::all()]);
       }
       
    @foreach($siswa as $data)
           <td> {{ $loop->iteration }} </td> 
           <td> {{ $data->nama }} </td>
    @endforeach
    
=========================================================================================================================================================
    
    
4. SHOW
    
    href="/siswa/{{ $data->id }}"
    
    ...show(Siswa $siswa){
        return view('detailsiswa',['siswa'=>$siswa]);
        }
    <h2> $siswa->nama </h2>
    <p> $siswa->alamat </p>
    
    
=========================================================================================================================================================
    
5. DELETE
    
    <form action="/siswa/{{ $data->id }} method="POST" d-inline enctype="multipart/form-data" 
    @csrf
    @method('delete')
    <buuton submit>
    
    ...destroy(Siswa $siswa){
        Siswa::destroy($siswa->id);
        return redirect('/siswa)->with('success','data berhasil dihapus');
        
        
=========================================================================================================================================================
        
        
6. TAMBAH       

   href="/siswa/create"
   
   ...create(){
   return view('createsiswa');
   }
   
   
   <form action="/siswa" method="post" enctype="multipart/form-data"
   @csrf
   - name=""
   - submit
   
   ...store(Request $request){
   $validasiData = $request->validate([
   
   'nis' => 'required|unique:siswas',
   'nama' => 'required|min:3|max:255'   
   ]);
   
   Siswa::create($validasiData);
   return redirect('/siswa)->with('','');
   
   }
 
========================================================================================================================================================= 
   
   
7. UBAH
   
   href="/siswa/{{ $data->id }}/edit"
   
   ...edit( Siswa $siswa ){
   return view('editsiswa',['siswa'=>$siswa]);
   }
   
   <form action="/$iswa/{{ $siswa->id }}" method="post" enctype="multipart/form-data 
   @csrf
   @method('put')
   
   name=""
   value="{{ $siswa->nama }}"
   
   ...update(Request $request, Siswa $siswa){
   
   $validasiData = $request->validate([
   'nama' => 'required',
   'alamat' => 'required'
   ]);
   
   Siswa::where('id',$siswa->id)->update($validasiData);
   return redirect('/siswa)->with('','');
   
   }
   
=========================================================================================================================================================
   
8. TAMBAH BERGAMBAR
   
   FILESYSTEM_DISK=public -> .env  -> agar folder yang kita buat berada didalam folder PUBLIC yang ada di folder storage/app/public
   php artisan storage link -> unutk penghubungkan folder storage dengan publlic supaya gambarnya bisa di akses
   {{ asset('storage/' . $data->gambar) }} -> unutk menampilkan gambar di dalam tag img tentunya

   
   'gambar' => 'image|required|file'
   
   $validasiData['gambar'] = $request->file('image')->store('image-siswa'); 
   
_______________________________________________________________________________________________________________________________________________________  
   
9. DELETE BERGAMBAR
   use Illuminate\Support\Facades\Storage;
   
   if($siwa->image){
      Storage::delete($siswa->image); (Unutuk menghapus gambar yang ada di storage/app/public)
   }
   
      Siswa::destroy($siswa->id);  (unutk menghapus gambar yang ada di database)
      
_______________________________________________________________________________________________________________________________________________________   

10. UBAH BERGAMBAR

    input type="hidden" name="gambarlama" value="{{ $siswa->image }}" -> untuk mengirim gambar lama
    input type="file" name="image"
    <img src="{{ asset('storage/' .$siswa->image) }}">
    
    'image' => 'image'
    
    if($request->file('image')){
        if($request->gambarlama){
          Storage::delete($request->gambarlama); -> unutk menghapus gambar lama
        }
        
        $validasiData['image'] = $request->file('image')->store('siswa-image');  -> menambahkan gambar baru di storage/app/public/siswa-image
    }
    
    Siswa::where('id',$siswa->id)->update($validasiData); -> menambahkan data ke database
        
=========================================================================================================================================================
    
11. TAMBAHAN

    //dalam input
    autofocus
    required
    placeholder=""
    autocomplete="off"
    value="{{ old('nama') }}"
    @error('nama') is-invalid @endrror
    
    //luar input pake invalid-feedback
    @error('nama')
      {{ $message }} 
    @enderror
    
    //pake alert bootsrap
    @if(session()->has('success'))
        {{ session('success') }}
        
    @endif
    
    //di dalam class
    {{ Request::is('dashboard*') ? 'active' : '' }}
    
    
    //tampil setelah login
    {{ auth()->user()->nama }}
    {{ asset('storage/' .Auth::user()->image) }}
    
    
    
    










































   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
    
    
    
    
    
